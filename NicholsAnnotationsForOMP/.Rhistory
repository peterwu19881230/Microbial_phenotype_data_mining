## http://cgsc2.biology.yale.edu/Strain.php?ID=115891
##2
##Add 3 columns (CGSC synonym, strain availability, position of deletion) from: JWstrainInfoFromCGSC.txt created by parse_CGSC_Strains.R
JWstrainInfoFromCGSC=read.table("Data/JWstrainInfoFromCGSC.txt")
colnames(JWstrainInfoFromCGSC)=c("JW","JW2","position","strain_availibility")
temp2=merge(temp,JWstrainInfoFromCGSC,by="JW",all.x=T,all.y=F)
temp2=temp2[,c("ids","ECK","JW","JW2","associated_gene_names","position","Original Name","sorted_ECK_missing_gene_names_added","EcoCycID","bNumber","other.synonyms","strain_availibility")]
### A problem:
##JW1878 has 2 forms from CGSC: JW1878-4, JW1878-4/pWT2594 => I should remove the one with plasmid. It's unlikely Nichols used the strain with a plasmid encoding gfp and other things
JWstrainInfoFromCGSC$JW[which(duplicated(JWstrainInfoFromCGSC$JW))]
temp2=temp2[-which(temp2$JW2=="JW1878-4/pWTZ594"),]
temp2$bNumber[temp2$bNumber=="NULL"]=NA #clean the bNumber column
ECK_1st_table=temp2
##Check to see if the table is correct using Supplemental Information: Bacterial Strains from Nichols' paper
## 3737 Keio, 117 SPA, 5 DAS, 9 alleles, 9 linked controls, 2 truncations, and 100 sRNAs
sum(grepl(" - SPA",ECK_1st_table$sorted_ECK_missing_gene_names_added))
sum(grepl(" - DAS",ECK_1st_table$sorted_ECK_missing_gene_names_added))
sum(grepl(" - Linked",ECK_1st_table$sorted_ECK_missing_gene_names_added))
sum(grepl(" - Truncation",ECK_1st_table$sorted_ECK_missing_gene_names_added))
## I have to correct things that are not in the 3737 Keio (They do have ECK at the front but they weren't from Keio. However, the code above considered them to be):
hobbs=read.xlsx2("Data/hobbs2009_tables1_smallrnasandproteins.xls",sheetIndex=1,startRow=10,colIndex =1:2,header=F)
colnames(hobbs)=c("EcoCycID","genotype")
hobbsInNichols=merge(ECK_1st_table,hobbs,by="EcoCycID")
## add strain background column
#save(ECK_1st_table,file="ECK_name_mapping/ECK_1st_table.RData")
##(!)Some of the ECKs don't match an EcoCyc gene ID. Here they are.
###The table
NULLgenes=ECK_1st_table[ECK_1st_table$EcoCycID=="NULL",]
###A list of ECKs for those genes
Nullgenes.list=sapply(NULLgenes$`Original Name`,str_extract,pattern="^ECK[0-9][0-9][0-9][0-9]") %>% as.character
###Output the list to a text file
###write.table(Nullgenes.list,"Nullgenes.list.txt",quote=F,row.names = F,col.names = F)
###Create a smart table and map them to EcoCyc gene ID (Object ID) and pathways. Luckily, none of them are in a pathway
eightyNulls=read.table("Data/80NULLs.txt")
##Also, I Got all the ECKs and made a smart table on EcoCyc
###A list of all ECKs
ECKs_rows_fixed=read.csv("Data/names_allData_rows_fixed.csv",header = F) %>% t %>% as.character
##Another way to get this (by reading only the 1st column):
##ECKs_rows_fixed=read.csv(file="Data/allData.csv",colClasses=c("character", rep("NULL", 324))) %>% t %>% as.vector ##colClasses is used to skip all the other columns
ECKs.list=sapply(ECKs_rows_fixed,str_extract,pattern="^ECK[0-9][0-9][0-9][0-9]")
###write.table(ECKs.list,"ECKs.list.txt",quote=F,row.names = F,col.names = F)
##Create a table on MySQL
#mydb = dbConnect(MySQL(), user='root', password='1234', dbname='chemgen', host='localhost')
#dbWriteTable(mydb, name="Genotypes", value=ECK_1st_table,row.names=FALSE,overwrite=T) ###I already have ids, so there's no need for row names
##Set a primary key based on gene_id (https://stackoverflow.com/questions/19198397/mysql-how-to-set-the-primary-key-on-phpmyadmin)
ECKs_rows_fixed=read.csv(file="Data/allData.csv",colClasses=c("character", rep("NULL", 324))) %>% t %>% as.vector ##colClasses is used to skip all the other columns
ECKs_rows_fixed=sort(ECKs_rows_fixed)
dup1=ECKs_rows_fixed[duplicated(ECKs_rows_fixed,fromLast=T)] %>% paste0("-1")
dup2=ECKs_rows_fixed[duplicated(ECKs_rows_fixed,fromLast=F)] %>% paste0("-2")
index_dup_1=which(duplicated(ECKs_rows_fixed,fromLast=T))
index_dup_2=which(duplicated(ECKs_rows_fixed,fromLast=F))
ECKs_rows_fixed[index_dup_1]=dup1
ECKs_rows_fixed[index_dup_2]=dup2
ECKs.list=sapply(ECKs_rows_fixed,str_extract,pattern="^ECK[0-9][0-9][0-9][0-9]")
write.table(ECKs.list,"Data/ECKs.list.txt",quote=F,row.names = F,col.names = F)
dim(ECK_1st_table)
View(ECK_1st_table)
names(ECK_1st_table)
table_=ECK_1st_table[,c("ids","sorted_ECK_missing_gene_names_added","associated_gene_names","other.synonyms")] %>% unique
dim(table_)
?intersect
?strsplit
strsplit("thrA2,Hs,thrA1,thrD",split=",")
strsplit("thrA2,Hs,thrA1,thrD",split=",",fixed=T)
gene_name=ECK_1st_table$associated_gene_names
other_synonym=strsplit(ECK_1st_table$other.synonyms,split=",",fixed=T)
all_gene_synonyms=c()
for(i in 1:length(gene_name)){
all_gene_synonyms[i]=union(gene_name[i],other_synonym)
}
warnings
warnings()
paste("A","B",sep=",")
paste("A","B",c("C","D"),sep=",")
paste("A",c("C","D"),sep=",")
union("A",c("A","B"))
paste("A","B")
paste("A","B",sep=",")
all_gene_synonyms=c()
for(i in 1:length(gene_name)){
all_gene_synonyms[i]=union(gene_name[i],other_synonym) %>% paste(sep=",")
}
warnings()
all_gene_synonyms=c()
for(i in 1:length(gene_name)){
all_gene_synonyms[i]=union(gene_name[i],other_synonym[[i]]) %>% paste(sep=",")
}
warnings()
union(gene_name[1],other_synonym[[1]])
other_synonym[[1]]
union(gene_name[1],other_synonym[[1]]) %>% paste(sep=",")
union(gene_name[1],other_synonym[[1]]) %>% paste(collapse=",")
c(union(gene_name[1],other_synonym[[1]])) %>% paste(sep=",")
paste("A","B",sep=",")
paste(c("A","B"),sep=",")
all_gene_synonyms=c()
for(i in 1:length(gene_name)){
all_gene_synonyms[i]=union(gene_name[i],other_synonym[[i]]) %>% paste(collapse=",")
}
all_gene_synonyms[1:10]
temp=data.frame(all_gene_synonyms)
View(temp)
length(all_gene_synonyms)
ECK
?str_extract
ECK_1st_table$ECK
names(ECK_1st_table)
gene_name=ECK_1st_table$associated_gene_names
other_synonym=strsplit(ECK_1st_table$other.synonyms,split=",",fixed=T)
all_gene_synonyms=c()
for(i in 1:length(gene_name)){
all_gene_synonyms[i]=union(gene_name[i],other_synonym[[i]]) %>% paste(collapse=",")
}
table_=cbind(ECK_1st_table[,c("ids","associated_gene_names","ECK")],
all_gene_synonyms)
dim(table_)
table_=cbind(ECK_1st_table[,c("ids","associated_gene_names","ECK")],
all_gene_synonyms) %>% unique
dim(table_)
dim(table_)
?dbWriteTable
?MySQLConnection
View(ECK_1st_table)
save(ECK_1st_table,file="ECK_name_mapping/ECK_1st_table.RData")
getwd()
save(ECK_1st_table,file="Data/ECK_1st_table.RData")
currentDir=dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(currentDir)
library(dplyr)
lof_parent=read.table("lof_parent.txt",quote="",sep="\t",header=T,row.names = 1) %>% t %>% as.matrix
lof_parent=ifelse(lof_parent=="y",T,F)
View(lof_parent)
dat1=c(1,1,1,1,1.1,1.1,1.2)
dat2=c(5,6,4.1,5,5,5)
n_of_boot=5000 #no. of boostrap sampling
dat1_all=matrix(rep(dat1,n_of_boot),ncol=n_of_boot,byrow = F)
dat2_all=matrix(rep(dat2,n_of_boot),ncol=n_of_boot,byrow = F)
dat1=c(1,1,1,1,1.1,1.1,1.2)
dat2=c(5,6,4.1,5,5,5)
n_of_boot=5000 #no. of boostrap sampling
dat1_all=matrix(rep(dat1,n_of_boot),ncol=n_of_boot,byrow = F)
dat2_all=matrix(rep(dat2,n_of_boot),ncol=n_of_boot,byrow = F)
resample_mean=function(values){
mean(sample(values,replace=T))
}
mean(
( apply(dat2_all,2,FUN=resample_mean) - apply(dat1_all,2,FUN=resample_mean) ) <= 0
)
?left_join
View(modified_hamming_distance_3)
View(modified_hamming_distance_4)
browser()
q
?browser
browser(Q)
debuggingState(on=FALSE)
debuggingState(on=T)
debuggingState(on=FALSE)
?debuggingState
load("gene_pairwise_sim.RData")
View(gene_pairwise_sim)
currentDir=dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(currentDir)
library(dplyr)
lof_parent=read.table("lof_parent.txt",quote="",sep="\t",header=T,row.names = 1) %>% t %>% as.matrix
lof_parent=ifelse(lof_parent=="y",T,F)
temp=hamming_distance(lof_parent) #%>% melt_dist
temp
View(temp)
class(temp)
summary(as.numeric(temp))
hist(as.numeric(temp))
melt_dist
temp=hamming_distance(lof_parent) %>% melt
?melt
View(temp)
temp=hamming_distance(lof_parent) %>% as.dist %>% melt_dist
View(temp)
gene1_gene2_hamming=hamming_distance(lof_parent) %>% as.dist %>% melt_dist
?merge
names(gene_pairwise_sim)
names(gene1_gene2_hamming)=c("gene1","gene2","hamming_distance")
temp=merge(gene_pairwise_sim,gene1_gene2_hamming)
dim(gene_pairwise_sim)
dim(temp)
View(temp)
gene_pairwise_sim=temp[,c("gene1","gene2","mi_based_distance","hamming_distance","MF","BP","CC")]
save(gene_pairwise_sim,file="gene_pairwise_sim.RData")
View(temp)
gene_pairwise_sim$MF[order(gene_pairwise_sim$mi_based_distance)]
top_5_percent=1:((dim(gene_pairwise_sim)[1]*0.05) %>% round) #6592 genes are among the top 5% mi based similarity
par(mfrow=c(3,2))
boxplot(gene_pairwise_sim$MF,gene_pairwise_sim$MF[order(gene_pairwise_sim$mi_based_distance)][top_5_percent])
boxplot(gene_pairwise_sim$BP,gene_pairwise_sim$BP[order(gene_pairwise_sim$mi_based_distance)][top_5_percent])
boxplot(gene_pairwise_sim$CC,gene_pairwise_sim$CC[order(gene_pairwise_sim$mi_based_distance)][top_5_percent])
par(mfrow=c(1,1)) #reset to the default par()
names(gene_pairwise_sim)
par(mfrow=c(3,2))
boxplot(gene_pairwise_sim$MF,gene_pairwise_sim$MF[order(gene_pairwise_sim$hamming_distance)][top_5_percent])
boxplot(gene_pairwise_sim$BP,gene_pairwise_sim$BP[order(gene_pairwise_sim$hamming_distance)][top_5_percent])
boxplot(gene_pairwise_sim$CC,gene_pairwise_sim$CC[order(gene_pairwise_sim$hamming_distance)][top_5_percent])
par(mfrow=c(1,1)) #reset to the default par()
summary(gene_pairwise_sim$MF[order(gene_pairwise_sim$hamming_distance)])
summary(gene_pairwise_sim$MF[order(gene_pairwise_sim$hamming_distance)][1:10])
summary(gene_pairwise_sim$MF[order(gene_pairwise_sim$hamming_distance)][1:100])
summary(gene_pairwise_sim$MF[order(gene_pairwise_sim$hamming_distance)][1:100000])
summary(gene_pairwise_sim$MF[order(gene_pairwise_sim$hamming_distance)][1:6592])
View(lof_parent)
install.packages("jaccard") #jaccard.test.pairwise
jaccard.test.pairwise(lof_parent)
jaccard::jaccard.test.pairwise(lof_parent)
jaccard::jaccard.test.pairwise
MCA
library(FactoMineR)
MCA
?MCA
lof_MCA=MCA(lof_parent,method="Burt")
lof_MCA=MCA(lof_parent,method="Burt",ncp=21)
str(lof_MCA)
names(lof_MCA)
temp=dimdesc(lof_MCA,axes=1:1,proba=1)
str(temp)
top_5_percent=1:((dim(gene_pairwise_sim)[1]*0.05) %>% round) #6592 genes are among the top 5% mi based similarity
par(mfrow=c(3,2))
boxplot(gene_pairwise_sim$MF,gene_pairwise_sim$MF[order(gene_pairwise_sim$mi_based_distance)][top_5_percent],main="Molecular Function")
boxplot(gene_pairwise_sim$BP,gene_pairwise_sim$BP[order(gene_pairwise_sim$mi_based_distance)][top_5_percent],main="Biological Process")
boxplot(gene_pairwise_sim$CC,gene_pairwise_sim$CC[order(gene_pairwise_sim$mi_based_distance)][top_5_percent],main="Cellular Component")
top_5_percent=1:((dim(gene_pairwise_sim)[1]*0.05) %>% round) #6592 genes are among the top 5% mi based similarity
par(mfrow=c(3,2))
boxplot(gene_pairwise_sim$MF,gene_pairwise_sim$MF[order(gene_pairwise_sim$mi_based_distance)][top_5_percent],main="Molecular Function",ylab="MI based similarity")
boxplot(gene_pairwise_sim$BP,gene_pairwise_sim$BP[order(gene_pairwise_sim$mi_based_distance)][top_5_percent],main="Biological Process",ylab="MI based similarity")
boxplot(gene_pairwise_sim$CC,gene_pairwise_sim$CC[order(gene_pairwise_sim$mi_based_distance)][top_5_percent],main="Cellular Component",ylab="MI based similarity")
boxplot(a=gene_pairwise_sim$MF,b=gene_pairwise_sim$MF[order(gene_pairwise_sim$mi_based_distance)][top_5_percent],main="Molecular Function",ylab="MI based similarity")
?boxplot
?boxplot
top_5_percent=1:((dim(gene_pairwise_sim)[1]*0.05) %>% round) #6592 genes are among the top 5% mi based similarity
par(mfrow=c(3,2))
boxplot(gene_pairwise_sim$MF,gene_pairwise_sim$MF[order(gene_pairwise_sim$mi_based_distance)][top_5_percent],main="Molecular Function",ylab="GO semantic similarity",names=c("All pairwise","Highest 5% MI based similarity"))
boxplot(gene_pairwise_sim$BP,gene_pairwise_sim$BP[order(gene_pairwise_sim$mi_based_distance)][top_5_percent],main="Biological Process",ylab="GO semantic similarity",names=c("All pairwise","Highest 5% MI based similarity"))
boxplot(gene_pairwise_sim$CC,gene_pairwise_sim$CC[order(gene_pairwise_sim$mi_based_distance)][top_5_percent],main="Cellular Component",ylab="GO semantic similarity",names=c("All pairwise","Highest 5% MI based similarity"))
load("ECK_1st_table.RData") #the dependency file
load("Data/ECK_1st_table.RData") #the dependency file
setwd("/Users/peterwu/Dropbox//Nichols_Data_mining/"); load("Data/ECK_1st_table.RData") #the dependency file
getwd()
load("Data/ECK_1st_table.RData")
View(ECK_1st_table)
gene_name=ECK_1st_table$associated_gene_names
other_synonym=strsplit(ECK_1st_table$other.synonyms,split=",",fixed=T)
all_gene_synonyms=c()
for(i in 1:length(gene_name)){
all_gene_synonyms[i]=union(gene_name[i],other_synonym[[i]]) %>% paste(collapse=",")
}
table_=cbind(ECK_1st_table[,c("ids","associated_gene_names","ECK")],
all_gene_synonyms) %>% unique #unique is to get rid of the propagated rows resulted from other colnames in ECK_1st_table
View(table_)
View(table_)
gene_name=ECK_1st_table$associated_gene_names
other_synonym=strsplit(ECK_1st_table$other.synonyms,split=",",fixed=T)
gene_name
other_synonym
identical(character(0),character(0))
gene_name=ECK_1st_table$associated_gene_names
other_synonym=strsplit(ECK_1st_table$other.synonyms,split=",",fixed=T)
all_gene_synonyms=c()
for(i in 1:length(gene_name)){
if(identical(character(0),other_synonym[[i]])){
all_gene_synonyms[i]=gene_name[i]
}else{
all_gene_synonyms[i]=union(gene_name[i],other_synonym[[i]]) %>% paste(collapse=",")
}
}
table_=cbind(ECK_1st_table[,c("ids","associated_gene_names","ECK")],
all_gene_synonyms) %>% unique #unique is to get rid of the propagated rows resulted from other colnames in ECK_1st_table
View(table_)
gene_name=ECK_1st_table$associated_gene_names
other_synonym=strsplit(ECK_1st_table$other.synonyms,split=",",fixed=T)
all_gene_synonyms=c()
for(i in 1:length(gene_name)){
if(identical(character(0),other_synonym[[i]])){
all_gene_synonyms[i]=gene_name[i]
}else{
all_gene_synonyms[i]=union(gene_name[i],other_synonym[[i]]) %>% paste(collapse=",")
}
}
table_=cbind(ECK_1st_table[,c("ids","associated_gene_names","ECK")],
all_gene_synonyms) %>% unique #unique is to get rid of the propagated rows resulted from other colnames in ECK_1st_table
View(table_)
other_synonym
other_synonym[[1000]]
gene_name
which(gene_name=="rybd")
which(gene_name=="rybD")
other_synonym[[3970]]
other_synonym[3970]
other_synonym
other_synonym[1000]
other_synonym[3970]
source("id_mapping/clean_names.R")
library(stringr)
#Add Unique IDs and all synonyms based on genes.dat (from EcoCyc)
##Extract info from  genes.dat object created by parse.genes.dat.R
##(!)Note that some of the ECKs are pseudogenes. They are not in genes.dat
uniqueID=list()
synonyms=list()
accessions=list()
accessions_bNumber=list()
for(i in 1:length(genes.dat)){
###retrieve Unique ID
uniqueID[i]=names(genes.dat)[[i]]
###retrieve b number
accessions_bNumber[i]=paste(genes.dat[[i]][["ACCESSION-1 - "]],collapse = ",")
###retrieve ECK
accessions[i]=paste(genes.dat[[i]][["ACCESSION-2 - "]],collapse = ",")
###subsetting a list element that doesn't exist won't return "subscript out of bounds". Instead, it returns NULL
###retrieve synonyms if any
synonyms[i]=paste(genes.dat[[i]][["SYNONYMS - "]],collapse = ",")
}
indices=list()
for(i in 1:3979){
ECK=str_extract(id_ECKs_CorrectedECKs_AssociatedGeneNames$`originalECKs`[i],"^ECK[0-9]{4}")
index=which(accessions %in% ECK)
if( index %>% length >= 1 &is.numeric(index)==T){
indices[[i]]=index
}else{
indices[[i]]=""
}
}
rm(ECK,index)
###This loop checks if there are more than 2 ECKs found
two.or.more=list()
j=1
for(i in 1:length(indices)){
if(length(indices[[i]])>=2){
two.or.more[j]=indices[i]
names(two.or.more)[j]=paste("index from indices= ",i)
j=j+1
}
}
two.or.more ###indices[687]=1859 2015  (ECK1366 was found twice in genes.dat)
ckass(synonyms)
class(synonyms)
synonyms
paste(synonyms[1000],collapse=",")
paste(synonyms[998],collapse=",")
paste(synonyms[995],collapse=",")
is.null(synonyms)
sapply(synonyms,is.null) %>% sum
EcoCycID=c()
other.synonyms=c()
bNumber=c()
for(i in 1:3979){
EcoCycID[i]=paste(uniqueID[indices[[i]]],collapse=",") ###Allowing concatnating a vector into 1 string
other.synonyms[i]=paste(synonyms[indices[[i]]],collapse=",") ###If there are no synomym, the result will be "" (empty character)
if(grepl("^,",other.synonyms[i])==T){
other.synonyms[i]=""
}  ###remove "," without any synonym attached
bNumber[i]=paste(accessions_bNumber[indices[[i]]],collapse=",")
}
other.synonyms
table(other.synonyms)
sort(other.synonyms,decreasing = T)
sort(table(other.synonyms),decreasing = T)
sort(table(other.synonyms),decreasing = T)[1:10]
sapply(synonyms,is.null) %>% which
sapply(synonyms,is.null)
which(sapply(synonyms,is.null))
which(sapply(other.synonyms,is.null))
sum(is.null(other.synonyms))
sum(other.synonyms=="NULL")
which(other.synonyms=="NULL")
other.synonyms[[103]]
other.synonyms[103]
synonyms[103]
paste("",collapse=",")
paste("NULL",collapse=",")
synonyms[indices[[103]]]
class(synonyms)
synonyms
indices[[103]]
which(other.synonyms=="NULL")
source("id_mapping/clean_names.R")
library(stringr)
#Add Unique IDs and all synonyms based on genes.dat (from EcoCyc)
##Extract info from  genes.dat object created by parse.genes.dat.R
##(!)Note that some of the ECKs are pseudogenes. They are not in genes.dat
uniqueID=list()
synonyms=list()
accessions=list()
accessions_bNumber=list()
for(i in 1:length(genes.dat)){
###retrieve Unique ID
uniqueID[i]=names(genes.dat)[[i]]
###retrieve b number
accessions_bNumber[i]=paste(genes.dat[[i]][["ACCESSION-1 - "]],collapse = ",")
###retrieve ECK
accessions[i]=paste(genes.dat[[i]][["ACCESSION-2 - "]],collapse = ",")
###subsetting a list element that doesn't exist won't return "subscript out of bounds". Instead, it returns NULL
###retrieve synonyms if any
synonyms[i]=paste(genes.dat[[i]][["SYNONYMS - "]],collapse = ",")
}
indices=list()
for(i in 1:3979){
ECK=str_extract(id_ECKs_CorrectedECKs_AssociatedGeneNames$`originalECKs`[i],"^ECK[0-9]{4}")
index=which(accessions %in% ECK)
if( index %>% length >= 1 &is.numeric(index)==T){
indices[[i]]=index
}else{
indices[[i]]=""
}
}
rm(ECK,index)
###This loop checks if there are more than 2 ECKs found
two.or.more=list()
j=1
for(i in 1:length(indices)){
if(length(indices[[i]])>=2){
two.or.more[j]=indices[i]
names(two.or.more)[j]=paste("index from indices= ",i)
j=j+1
}
}
two.or.more ###indices[687]=1859 2015  (ECK1366 was found twice in genes.dat)
###This block prepares data to cbind(). Mainly because ECK1366 found 2 data in genes.dat
EcoCycID=c()
other.synonyms=c()
bNumber=c()
for(i in 1:3979){
EcoCycID[i]=paste(uniqueID[indices[[i]]],collapse=",") ###Allowing concatnating a vector into 1 string
other.synonyms[i]=paste(synonyms[indices[[i]]],collapse=",") ###If there are no synomym, the result will be "" (empty character)
if(grepl("^,",other.synonyms[i])==T | other.synonyms[i]=="NULL"){
other.synonyms[i]=""
}  ###remove "," without any synonym attached
bNumber[i]=paste(accessions_bNumber[indices[[i]]],collapse=",")
}
###drop all levels in the column: sorted_ECK_missing_gene_names_added
id_ECKs_CorrectedECKs_AssociatedGeneNames$sorted_ECK_missing_gene_names_added=as.character(id_ECKs_CorrectedECKs_AssociatedGeneNames$sorted_ECK_missing_gene_names_added)
##The result obj. Note that ECK1366-LOMR' has 2 EcoCyc identifiers => we should use G6692 because LOMR' means the disruption on the N terminal (if it's 'LOMR it's C terminal)
ECK_1st_table=cbind(id_ECKs_CorrectedECKs_AssociatedGeneNames,
EcoCycID=EcoCycID,
other.synonyms=other.synonyms,bNumber,stringsAsFactors=F)
##Correct the row: ECK1366-LOMR'
ECK_1st_table[ECK_1st_table$sorted_ECK_missing_gene_names_added=="ECK1366-LOMR'",]$EcoCycID="G6692"
ECK_1st_table[ECK_1st_table$sorted_ECK_missing_gene_names_added=="ECK1366-LOMR'",]$bNumber="b1369"
ECK_1st_table=as.data.frame(ECK_1st_table)
names(ECK_1st_table)[2]="Original Name"
#The following code:
##1. add a column for JW numbers by an original file provided by Nichols' paper
##2. add columns for the link to CGSC synonym, strain availability, position of deletion
##(problems are explained in each block)
library(xlsx)
library(stringr)
##1
strainInfo=read.xlsx2("Data/inline-supplementary-material-4(Baba et al., 2006).xls",sheetIndex=1,startRow=3,colIndex =1:3 )
colnames(strainInfo)=c("ECK","gene","JW")
ECK_1st_table$ECK=str_extract(ECK_1st_table$sorted_ECK_missing_gene_names_added,"^ECK[0-9]{4}")
temp=merge(ECK_1st_table,strainInfo,by="ECK",all.x=T,all.y=F)
temp$ids=as.character(temp$ids)
temp=temp[order(as.numeric(temp$ids)),]
### A problem:
sum(duplicated(temp$ids)) #7 ECKs have more than 1 JW names (according to the file: inline-supplementary-material-4(Baba et al., 2006).xls).
##This table gives the info of all those ECKs that have 2 JWs => The genes deleted are the same but the positions are different
duplicated.ECK=temp[temp$ECK %in% c("ECK0614","ECK1007","ECK1157","ECK1409","ECK1718","ECK1975","ECK2025"),]
##For example ECK0614:
## http://cgsc2.biology.yale.edu/Strain.php?ID=115890
## http://cgsc2.biology.yale.edu/Strain.php?ID=115891
##2
##Add 3 columns (CGSC synonym, strain availability, position of deletion) from: JWstrainInfoFromCGSC.txt created by parse_CGSC_Strains.R
JWstrainInfoFromCGSC=read.table("Data/JWstrainInfoFromCGSC.txt")
colnames(JWstrainInfoFromCGSC)=c("JW","JW2","position","strain_availibility")
temp2=merge(temp,JWstrainInfoFromCGSC,by="JW",all.x=T,all.y=F)
temp2=temp2[,c("ids","ECK","JW","JW2","associated_gene_names","position","Original Name","sorted_ECK_missing_gene_names_added","EcoCycID","bNumber","other.synonyms","strain_availibility")]
### A problem:
##JW1878 has 2 forms from CGSC: JW1878-4, JW1878-4/pWT2594 => I should remove the one with plasmid. It's unlikely Nichols used the strain with a plasmid encoding gfp and other things
JWstrainInfoFromCGSC$JW[which(duplicated(JWstrainInfoFromCGSC$JW))]
temp2=temp2[-which(temp2$JW2=="JW1878-4/pWTZ594"),]
temp2$bNumber[temp2$bNumber=="NULL"]=NA #clean the bNumber column
ECK_1st_table=temp2
##Check to see if the table is correct using Supplemental Information: Bacterial Strains from Nichols' paper
## 3737 Keio, 117 SPA, 5 DAS, 9 alleles, 9 linked controls, 2 truncations, and 100 sRNAs
sum(grepl(" - SPA",ECK_1st_table$sorted_ECK_missing_gene_names_added))
sum(grepl(" - DAS",ECK_1st_table$sorted_ECK_missing_gene_names_added))
sum(grepl(" - Linked",ECK_1st_table$sorted_ECK_missing_gene_names_added))
sum(grepl(" - Truncation",ECK_1st_table$sorted_ECK_missing_gene_names_added))
## I have to correct things that are not in the 3737 Keio (They do have ECK at the front but they weren't from Keio. However, the code above considered them to be):
hobbs=read.xlsx2("Data/hobbs2009_tables1_smallrnasandproteins.xls",sheetIndex=1,startRow=10,colIndex =1:2,header=F)
colnames(hobbs)=c("EcoCycID","genotype")
hobbsInNichols=merge(ECK_1st_table,hobbs,by="EcoCycID")
save(ECK_1st_table,file="Data/ECK_1st_table.RData")
getwd()
setwd("NicholsAnnotationsForOMP")
currentDir=dirname(rstudioapi::getActiveDocumentContext()$path)
?read.xlsx
temp=read.xlsx("Map Nichols conditions to OMP_9.6.2019.4.10PM.xlsx",sheetIndex = 1)
View(temp)
temp=read.xlsx("Map Nichols conditions to OMP_9.6.2019.4.10PM.xlsx",sheetIndex = 1,startRow=2)
View(temp)
table_=read.xlsx("Map Nichols conditions to OMP_9.6.2019.4.10PM.xlsx",sheetIndex = 1,startRow=2)
class_=table_[,"Current.classification.in.OMP"]
class_
unique(class_)
child_terms=unique(class_) %>% !is.na %>% !"1"
child_terms=unique(class_)
child_terms=child_terms[!is.na(child_terms)]
child_terms=child_terms[child_terms!="1"]
child_terms
View(table_)
names(table_)
child_terms=unique(class_)
child_terms
child_terms=child_terms[!is.na(child_terms)]
child_terms=child_terms[child_terms!="1"]
child_terms
