genes.dat
con = file("/Users/peterwu/Desktop/Nichols-Data-mining/ECK_name_mapping/genes.dat", "r")
i=1
while ( TRUE ) {
line = readLines(con, n = 1)
##remove the hashes
hash.is.found=grepl("^#",line)
if(hash.is.found==T){next}
##Store if an ID is found
ID=grepl("^UNIQUE-ID",line)
if(ID==T){
genes.dat[[i]]$UNIQUE.ID=sub("^UNIQUE-ID - ","",line)
}
#Go to the next gene if // is found
if(grepl("//",line,fixed=T)==T){
i=i+1
next
}
if ( length(line) == 0 ) {
break
}
}
close(con)
genes.dat
gene=list()
gene[[1]]$ID="A"
gene[[1]]
gene[[1]]=NULL
gene[[1]]$ID="A"
gene[[1]]$ID=NULL
gene=list(ID=NULL)
gene[[1]]$ID=NULL
gene=list()
gene[[1]]$ID=NULL
gene=list(ID=NULL)
gene[[1]]$ID=NULL
gene[[1]]$ID="ABC"
genes[1]$ID="ABC"
genes[1]
genes
gene[1]$ID="ABC"
gene[1]="ABC"
gene[2]="DEF"
gene[5]="BVC"
gene
gene[1][1]="ABC"
gene[1][3]="ABC"
gene[1][[1]]="ABC"
gene[1][[3]]="ABC"
gene[1][[2]]="ABC"
gene
gene[[1]]
gene[[1]][[1]]
gene[[1]][[2]]
gene[[1]][[2]]="DEG"
gene
gene[[1]][[2]]=list("ABC","FTT")
gene[[1]][[3]]=list("ABC","FTT")
gene[[1]][[3]]="qQQ"
gene
gene=list(ID=NULL,data=NULL)
gene
data=list(gene=list(ID=NULL,data=NULL))
data
data$gene
data$gene[[1]]
data$gene[[2]]
data$gene[[3]]
data[[1]]$gene
data[[2]]$gene
data[[2]]$gene=1
data[[1]]$gene=1
data[[2]]$gene=1
data[[1]]=1
data[[2]]=1
data[[3]]=1
data
data=list(list(ID=NULL,data=NULL))
data[[1]][[1]]=1
data[[1]][[2]]=1
data[[1]][[3]]=1
data[[1]][[4]]=1
data
data[[1]][[6]]=1
data
data[[1]][["gene"]]=1
data
data[[1]][["ID"]]="ID1"
data
data=list()
data[[1]][["ID"]]="ID1"
data=list(gene=list)
data[[1]][["ID"]]="ID1"
data=list(list())
data[[1]][["ID"]]="ID1"
data[[1]][["data"]]="data"
data
data[[2]][["ID"]]="ID2"
data[[2]]="ID2"
data[[2]][["ID"]]="ID2"
data[[3]]="ID3"
data[[3]][["ID"]]="ID3"
data
data[[4]]=list(ID=NULL,data=NULL)
data
data[[4]]$ID="ID4"
data[[4]]$data="data4"
data
con = file("/Users/peterwu/Desktop/Nichols-Data-mining/ECK_name_mapping/genes.dat", "r")
i=1
while ( TRUE ) {
line = readLines(con, n = 1)
##remove the hashes
hash.is.found=grepl("^#",line)
if(hash.is.found==T){next}
##Store if an ID is found
ID=grepl("^UNIQUE-ID",line)
if(ID==T){
genes.dat[[i]]=list(UNIQUE.ID=NULL, data=NULL)
genes.dat[[i]]$UNIQUE.ID=sub("^UNIQUE-ID - ","",line)
}
#Go to the next gene if // is found
if(grepl("//",line,fixed=T)==T){
i=i+1
next
}
if ( length(line) == 0 ) {
break
}
}
close(con)
genes.dat$UNIQUE.ID
genes.dat[[1]]$UNIQUE.ID
genes.dat[[2]]$UNIQUE.ID
genes.dat[[3]]$UNIQUE.ID
genes.dat[[90]]$UNIQUE.ID
att=c("TYPES - ","COMMON-NAME - ","ACCESSION-1 - ","ACCESSION-2 - ","CENTISOME-POSITION - ","CITATIONS - ","COMMENT - ","COMPONENT-OF - ",
"COPY-NUMBER - ","CREDITS - ","DATA-SOURCE - ","DBLINKS - ","DOCUMENTATION - ","LAST-UPDATE - ","LEFT-END-POSITION - ",
"MEMBER-SORT-FN - ","PATHOLOGIC-NAME-MATCHER-EVIDENCE - ", "PATHOLOGIC-PWY-EVIDENCE - ","REGULATED-BY - ","RIGHT-END-POSITION - ",
"SYNC-W-ORTHOLOG - ","SYNONYMS - ","UNMAPPED-COMPONENT-OF - ")
##Process the file
con = file("/Users/peterwu/Desktop/Nichols-Data-mining/ECK_name_mapping/genes.dat", "r")
i=1
while ( TRUE ) {
line = readLines(con, n = 1)
##remove the hashes
hash.is.found=grepl("^#",line)
if(hash.is.found==T){next}
##Store if an ID is found
ID=grepl("^UNIQUE-ID",line)
if(ID==T){
genes.dat[[i]]=list(UNIQUE.ID=NULL, data=NULL)
genes.dat[[i]]$UNIQUE.ID=sub("^UNIQUE-ID - ","",line)
}
##store the data if they are found
for(j in 1:23){
found=grepl(paste("^",att[j]),line)
if(found==T){
genes.dat[[i]]$data[[j]]=sub(paste("^",found),"",line)
}
}
#Go to the next gene if // is found
if(grepl("//",line,fixed=T)==T){
i=i+1
next
}
if ( length(line) == 0 ) {
break
}
}
close(con)
genes.dat[[5]]
genes.dat[[1]]
genes.dat[[1]]$UNIQUE.ID
genes.dat
line
line=DBLINKS - (ECOGENE "EG11510" NIL |pick| 3292798423 NIL NIL)
line="DBLINKS - (ECOGENE "EG11510" NIL |pick| 3292798423 NIL NIL)"
"ABC"
line="DBLINKS - (ECOGENE EG11510 NIL |pick| 3292798423 NIL NIL)"
grepl(paste("^","DBLINKS - "),line)
paste("^","DBLINKS - ")
con = file("/Users/peterwu/Desktop/Nichols-Data-mining/ECK_name_mapping/genes.dat", "r")
i=1
while ( TRUE ) {
line = readLines(con, n = 1)
##remove the hashes
hash.is.found=grepl("^#",line)
if(hash.is.found==T){next}
##Store if an ID is found
ID=grepl("^UNIQUE-ID",line)
if(ID==T){
genes.dat[[i]]=list(UNIQUE.ID=NULL, data=NULL)
genes.dat[[i]]$UNIQUE.ID=sub("^UNIQUE-ID - ","",line)
}
##store the data if they are found
for(j in 1:23){
found=grepl(paste("^",att[j]),line)
if(found==T){
genes.dat[[i]]$data[[j]]=sub(paste("^",found,sep=""),"",line)
}
}
#Go to the next gene if // is found
if(grepl("//",line,fixed=T)==T){
i=i+1
next
}
if ( length(line) == 0 ) {
break
}
}
close(con)
genes.dat
grepl(paste("^","DBLINKS - "),line)
line="DBLINKS - (ECOGENE EG11510 NIL |pick| 3292798423 NIL NIL)"
grepl(paste("^","DBLINKS - "),line)
grepl(paste("^","DBLINKS - ",sep=""),line)
?sub
con = file("/Users/peterwu/Desktop/Nichols-Data-mining/ECK_name_mapping/genes.dat", "r")
i=1
while ( TRUE ) {
line = readLines(con, n = 1)
##remove the hashes
hash.is.found=grepl("^#",line)
if(hash.is.found==T){next}
##Store if an ID is found
ID=grepl("^UNIQUE-ID",line)
if(ID==T){
genes.dat[[i]]=list(UNIQUE.ID=NULL, data=NULL)
genes.dat[[i]]$UNIQUE.ID=sub("^UNIQUE-ID - ","",line)
}
##store the data if they are found
for(j in 1:23){
found=grepl(paste("^",att[j],sep=""),line)
if(found==T){
genes.dat[[i]]$data[[j]]=sub(found,"",line)
}
}
#Go to the next gene if // is found
if(grepl("//",line,fixed=T)==T){
i=i+1
next
}
if ( length(line) == 0 ) {
break
}
}
close(con)
genes.dat
con = file("/Users/peterwu/Desktop/Nichols-Data-mining/ECK_name_mapping/genes.dat", "r")
i=1
while ( TRUE ) {
line = readLines(con, n = 1)
##remove the hashes
hash.is.found=grepl("^#",line)
if(hash.is.found==T){next}
##Store if an ID is found
ID=grepl("^UNIQUE-ID",line)
if(ID==T){
genes.dat[[i]]=list(UNIQUE.ID=NULL, data=NULL) #Initialize the value. Otherwise there will be "Subscripts out of bounds"
genes.dat[[i]]$UNIQUE.ID=sub("^UNIQUE-ID - ","",line)
}
##store the data if they are found
for(j in 1:23){
found=grepl(paste("^",att[j],sep=""),line)
if(found==T){
genes.dat[[i]]$data[[j]]=sub(att[j],"",line)
}
}
#Go to the next gene if // is found
if(grepl("//",line,fixed=T)==T){
i=i+1
next
}
if ( length(line) == 0 ) {
break
}
}
close(con)
genes.dat
x=list(a=1,b=2,c=3)
x
x[[1]]
x[[2]]
x[[3]]
genes.dat=list(list(UNIQUE.ID=NULL,
data=list(TYPES=NULL,COMMON.NAME=NULL,ACCESSION.1=NULL,ACCESSION.2=NULL,
##stanza contains the whole text before for each dataset of a gene
CENTISOME.POSITION=NULL,CITATIONS=NULL,COMMENT=NULL,COMPONENT.OF=NULL,
COPY.NUMBER=NULL,CREDITS=NULL,DATA.SOURCE=NULL,DBLINKS=NULL,DOCUMENTATION=NULL,
LAST.UPDATE=NULL,LEFT.END.POSITION=NULL,MEMBER.SORT.FN=NULL,
PATHOLOGIC.NAME.MATCHER.EVIDENCE=NULL,PATHOLOGIC.PWY.EVIDENCE=NULL,
REGULATED.BY=NULL,RIGHT.END.POSITION=NULL,SYNC.W.ORTHOLOG=NULL,SYNONYMS=NULL,
UNMAPPED.COMPONENT.OF=NULL)
))
#Define the att vector. There are 23.
att=c("TYPES - ","COMMON-NAME - ","ACCESSION-1 - ","ACCESSION-2 - ","CENTISOME-POSITION - ","CITATIONS - ","COMMENT - ","COMPONENT-OF - ",
"COPY-NUMBER - ","CREDITS - ","DATA-SOURCE - ","DBLINKS - ","DOCUMENTATION - ","LAST-UPDATE - ","LEFT-END-POSITION - ",
"MEMBER-SORT-FN - ","PATHOLOGIC-NAME-MATCHER-EVIDENCE - ", "PATHOLOGIC-PWY-EVIDENCE - ","REGULATED-BY - ","RIGHT-END-POSITION - ",
"SYNC-W-ORTHOLOG - ","SYNONYMS - ","UNMAPPED-COMPONENT-OF - ")
##Process the file
con = file("/Users/peterwu/Desktop/Nichols-Data-mining/ECK_name_mapping/genes.dat", "r")
i=1
while ( TRUE ) {
line = readLines(con, n = 1)
##remove the hashes
hash.is.found=grepl("^#",line)
if(hash.is.found==T){next}
##Store if an ID is found
ID=grepl("^UNIQUE-ID",line)
if(ID==T){
genes.dat[[i]]=list(UNIQUE.ID=NULL, data=list(TYPES=NULL,COMMON.NAME=NULL,ACCESSION.1=NULL,ACCESSION.2=NULL,
##stanza contains the whole text before for each dataset of a gene
CENTISOME.POSITION=NULL,CITATIONS=NULL,COMMENT=NULL,COMPONENT.OF=NULL,
COPY.NUMBER=NULL,CREDITS=NULL,DATA.SOURCE=NULL,DBLINKS=NULL,DOCUMENTATION=NULL,
LAST.UPDATE=NULL,LEFT.END.POSITION=NULL,MEMBER.SORT.FN=NULL,
PATHOLOGIC.NAME.MATCHER.EVIDENCE=NULL,PATHOLOGIC.PWY.EVIDENCE=NULL,
REGULATED.BY=NULL,RIGHT.END.POSITION=NULL,SYNC.W.ORTHOLOG=NULL,SYNONYMS=NULL,
UNMAPPED.COMPONENT.OF=NULL))   #Initialize the value. Otherwise there will be "Subscripts out of bounds"
genes.dat[[i]]$UNIQUE.ID=sub("^UNIQUE-ID - ","",line)
}
##store the data if they are found
for(j in 1:23){
found=grepl(paste("^",att[j],sep=""),line)
if(found==T){
genes.dat[[i]]$data[[j]]=sub(att[j],"",line)
}
}
#Go to the next gene if // is found
if(grepl("//",line,fixed=T)==T){
i=i+1
next
}
if ( length(line) == 0 ) {
break
}
}
close(con)
genes.dat
genes.dat
#Define the att vector. There are 23.
att=c("TYPES - ","COMMON-NAME - ","ACCESSION-1 - ","ACCESSION-2 - ","CENTISOME-POSITION - ","CITATIONS - ","COMMENT - ","COMPONENT-OF - ",
"COPY-NUMBER - ","CREDITS - ","DATA-SOURCE - ","DBLINKS - ","DOCUMENTATION - ","LAST-UPDATE - ","LEFT-END-POSITION - ",
"MEMBER-SORT-FN - ","PATHOLOGIC-NAME-MATCHER-EVIDENCE - ", "PATHOLOGIC-PWY-EVIDENCE - ","REGULATED-BY - ","RIGHT-END-POSITION - ",
"SYNC-W-ORTHOLOG - ","SYNONYMS - ","UNMAPPED-COMPONENT-OF - ")
##Process the file
con = file("/Users/peterwu/Desktop/Nichols-Data-mining/ECK_name_mapping/genes.dat", "r")
i=1
while ( TRUE ) {
line = readLines(con, n = 1)
##remove the hashes
hash.is.found=grepl("^#",line)
if(hash.is.found==T){next}
##Store if an ID is found
ID=grepl("^UNIQUE-ID",line)
if(ID==T){
genes.dat[[i]]=list(UNIQUE.ID=NULL, data=list(TYPES=NULL,COMMON.NAME=NULL,ACCESSION.1=NULL,ACCESSION.2=NULL,
##stanza contains the whole text before for each dataset of a gene
CENTISOME.POSITION=NULL,CITATIONS=NULL,COMMENT=NULL,COMPONENT.OF=NULL,
COPY.NUMBER=NULL,CREDITS=NULL,DATA.SOURCE=NULL,DBLINKS=NULL,DOCUMENTATION=NULL,
LAST.UPDATE=NULL,LEFT.END.POSITION=NULL,MEMBER.SORT.FN=NULL,
PATHOLOGIC.NAME.MATCHER.EVIDENCE=NULL,PATHOLOGIC.PWY.EVIDENCE=NULL,
REGULATED.BY=NULL,RIGHT.END.POSITION=NULL,SYNC.W.ORTHOLOG=NULL,SYNONYMS=NULL,
UNMAPPED.COMPONENT.OF=NULL))   #Initialize the value. Otherwise there will be "Subscripts out of bounds"
genes.dat[[i]]$UNIQUE.ID=sub("^UNIQUE-ID - ","",line)
}
##store the data if they are found
for(j in 1:23){
found=grepl(paste("^",att[j],sep=""),line)
if(found==T){
genes.dat[[i]]$data[[j]]=sub(att[j],"",line)
}
}
#Go to the next gene if // is found
if(grepl("^//",line,fixed=T)==T){
i=i+1
next
}
if ( length(line) == 0 ) {
break
}
}
close(con)
genes.dat
grepl("^//","/EcoGene data base (http://bmb.med.miami.edu/EcoGene/EcoWeb/).")
grepl("//","/EcoGene data base (http://bmb.med.miami.edu/EcoGene/EcoWeb/).")
grepl("^//","/EcoGene data base (http://bmb.med.miami.edu/EcoGene/EcoWeb/).")
genes.dat[561]
genes.dat[[561]]
#Define the att vector. There are 23.
att=c("TYPES - ","COMMON-NAME - ","ACCESSION-1 - ","ACCESSION-2 - ","CENTISOME-POSITION - ","CITATIONS - ","COMMENT - ","COMPONENT-OF - ",
"COPY-NUMBER - ","CREDITS - ","DATA-SOURCE - ","DBLINKS - ","DOCUMENTATION - ","LAST-UPDATE - ","LEFT-END-POSITION - ",
"MEMBER-SORT-FN - ","PATHOLOGIC-NAME-MATCHER-EVIDENCE - ", "PATHOLOGIC-PWY-EVIDENCE - ","REGULATED-BY - ","RIGHT-END-POSITION - ",
"SYNC-W-ORTHOLOG - ","SYNONYMS - ","UNMAPPED-COMPONENT-OF - ")
##Process the file
con = file("/Users/peterwu/Desktop/Nichols-Data-mining/ECK_name_mapping/genes.dat", "r")
i=1
while ( TRUE ) {
line = readLines(con, n = 1)
##remove the hashes
hash.is.found=grepl("^#",line)
if(hash.is.found==T){next}
##Store if an ID is found
ID=grepl("^UNIQUE-ID",line)
if(ID==T){
genes.dat[[i]]=list(UNIQUE.ID=NULL, data=list(TYPES=NULL,COMMON.NAME=NULL,ACCESSION.1=NULL,ACCESSION.2=NULL,
##stanza contains the whole text before for each dataset of a gene
CENTISOME.POSITION=NULL,CITATIONS=NULL,COMMENT=NULL,COMPONENT.OF=NULL,
COPY.NUMBER=NULL,CREDITS=NULL,DATA.SOURCE=NULL,DBLINKS=NULL,DOCUMENTATION=NULL,
LAST.UPDATE=NULL,LEFT.END.POSITION=NULL,MEMBER.SORT.FN=NULL,
PATHOLOGIC.NAME.MATCHER.EVIDENCE=NULL,PATHOLOGIC.PWY.EVIDENCE=NULL,
REGULATED.BY=NULL,RIGHT.END.POSITION=NULL,SYNC.W.ORTHOLOG=NULL,SYNONYMS=NULL,
UNMAPPED.COMPONENT.OF=NULL))   #Initialize the value. Otherwise there will be "Subscripts out of bounds"
genes.dat[[i]]$UNIQUE.ID=sub("^UNIQUE-ID - ","",line)
}
##store the data if they are found
for(j in 1:23){
found=grepl(paste("^",att[j],sep=""),line)
if(found==T){
genes.dat[[i]]$data[[j]]=sub(att[j],"",line)
}
}
#Go to the next gene if // is found
if(grepl("^//",line,fixed=T)==T){
i=i+1
next
}
if ( length(line) == 0 ) {
break
}
}
close(con)
#Define the att vector. There are 23.
att=c("TYPES - ","COMMON-NAME - ","ACCESSION-1 - ","ACCESSION-2 - ","CENTISOME-POSITION - ","CITATIONS - ","COMMENT - ","COMPONENT-OF - ",
"COPY-NUMBER - ","CREDITS - ","DATA-SOURCE - ","DBLINKS - ","DOCUMENTATION - ","LAST-UPDATE - ","LEFT-END-POSITION - ",
"MEMBER-SORT-FN - ","PATHOLOGIC-NAME-MATCHER-EVIDENCE - ", "PATHOLOGIC-PWY-EVIDENCE - ","REGULATED-BY - ","RIGHT-END-POSITION - ",
"SYNC-W-ORTHOLOG - ","SYNONYMS - ","UNMAPPED-COMPONENT-OF - ")
##Process the file
con = file("/Users/peterwu/Desktop/Nichols-Data-mining/ECK_name_mapping/genes.dat", "r")
i=1
while ( TRUE ) {
line = readLines(con, n = 1)
##remove the hashes
hash.is.found=grepl("^#",line)
if(hash.is.found==T){next}
##Store if an ID is found
ID=grepl("^UNIQUE-ID",line)
if(ID==T){
genes.dat[[i]]=list(UNIQUE.ID=NULL, data=list(TYPES=NULL,COMMON.NAME=NULL,ACCESSION.1=NULL,ACCESSION.2=NULL,
##stanza contains the whole text before for each dataset of a gene
CENTISOME.POSITION=NULL,CITATIONS=NULL,COMMENT=NULL,COMPONENT.OF=NULL,
COPY.NUMBER=NULL,CREDITS=NULL,DATA.SOURCE=NULL,DBLINKS=NULL,DOCUMENTATION=NULL,
LAST.UPDATE=NULL,LEFT.END.POSITION=NULL,MEMBER.SORT.FN=NULL,
PATHOLOGIC.NAME.MATCHER.EVIDENCE=NULL,PATHOLOGIC.PWY.EVIDENCE=NULL,
REGULATED.BY=NULL,RIGHT.END.POSITION=NULL,SYNC.W.ORTHOLOG=NULL,SYNONYMS=NULL,
UNMAPPED.COMPONENT.OF=NULL))   #Initialize the value. Otherwise there will be "Subscripts out of bounds"
genes.dat[[i]]$UNIQUE.ID=sub("^UNIQUE-ID - ","",line)
}
##store the data if they are found
for(j in 1:23){
found=grepl(paste("^",att[j],sep=""),line)
if(found==T){
genes.dat[[i]]$data[[j]]=sub(att[j],"",line)
}
}
#Go to the next gene if // is found
if(grepl("^//",line,fixed=T)==T){
i=i+1
next
}
if ( length(line) == 0 ) {
print("End of the file")
break
}
}
close(con)
con = file("/Users/peterwu/Desktop/Nichols-Data-mining/ECK_name_mapping/genes.dat", "r")
i=1
while ( TRUE ) {
line = readLines(con, n = 1)
##Store if an ID is found
ID=grepl("^UNIQUE-ID",line)
if(ID==T){
genes.dat[[i]]=list(UNIQUE.ID=NULL, data=list(TYPES=NULL,COMMON.NAME=NULL,ACCESSION.1=NULL,ACCESSION.2=NULL,
##stanza contains the whole text before for each dataset of a gene
CENTISOME.POSITION=NULL,CITATIONS=NULL,COMMENT=NULL,COMPONENT.OF=NULL,
COPY.NUMBER=NULL,CREDITS=NULL,DATA.SOURCE=NULL,DBLINKS=NULL,DOCUMENTATION=NULL,
LAST.UPDATE=NULL,LEFT.END.POSITION=NULL,MEMBER.SORT.FN=NULL,
PATHOLOGIC.NAME.MATCHER.EVIDENCE=NULL,PATHOLOGIC.PWY.EVIDENCE=NULL,
REGULATED.BY=NULL,RIGHT.END.POSITION=NULL,SYNC.W.ORTHOLOG=NULL,SYNONYMS=NULL,
UNMAPPED.COMPONENT.OF=NULL))   #Initialize the value. Otherwise there will be "Subscripts out of bounds"
genes.dat[[i]]$UNIQUE.ID=sub("^UNIQUE-ID - ","",line)
}
##store the data if they are found
for(j in 1:23){
found=grepl(paste("^",att[j],sep=""),line)
if(found==T){
genes.dat[[i]]$data[[j]]=sub(att[j],"",line)
}
}
#Go to the next gene if // is found
if(grepl("^//",line,fixed=T)==T){
i=i+1
next
}
if ( length(line) == 0 ) {
print("End of the file")
break
}
}
close(con)
genes.dat
